name: Deploy to Production

on:
  push:
    branches:
      - main # or your production branch
  workflow_dispatch: # allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file for build
        run: |
          cat > .env << EOL
          NODE_ENV=production
          BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL=${{ secrets.BETTER_AUTH_URL }}
          # Use mock database URL for build time to avoid connection issues
          TURSO_DATABASE_URL=libsql://mock-db-for-build.turso.io
          TURSO_AUTH_TOKEN=mock-token-for-build
          # Flags to skip database initialization
          NEXT_PUBLIC_SKIP_DB_INIT=true
          NEXT_SKIP_AUTH_CONFIG=true
          EOL

          # Print the environment file for debugging (without sensitive values)
          cat .env | grep -v "SECRET"

      - name: Update next.config.js for build
        run: |
          # Backup original config if it exists
          if [ -f "next.config.js" ]; then
            cp next.config.js next.config.js.bak
          fi

          # Add a temporary condition to skip connecting to the database during build
          # This is a temporary file that won't be deployed
          cat > next.config.js << EOL
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'standalone',
          };

          module.exports = nextConfig;
          EOL

      - name: Build application
        run: pnpm build
        env:
          # Add all environment variables needed for build
          NODE_ENV: production
          # Use a mock URL for build only
          TURSO_DATABASE_URL: libsql://mock-db-for-build.turso.io
          TURSO_AUTH_TOKEN: mock-token-for-build
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}
          # Add skip flags to bypass database initialization during build
          NEXT_PUBLIC_SKIP_DB_INIT: "true"
          NEXT_SKIP_AUTH_CONFIG: "true"

      - name: Restore original next.config.js
        run: |
          # Restore from backup if it exists
          if [ -f "next.config.js.bak" ]; then
            mv next.config.js.bak next.config.js
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare server directory
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Create app directory on server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/apps/reusify"

      - name: Copy built application to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Copy package files for production dependencies
          scp package.json ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/apps/reusify/
          # Copy pnpm lock file
          if [ -f "pnpm-lock.yaml" ]; then
            scp pnpm-lock.yaml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/apps/reusify/
          fi

          # Copy built application files
          scp -r .next ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/apps/reusify/
          scp -r public ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/apps/reusify/

          # Copy any other necessary files
          scp next.config.js ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/apps/reusify/

      - name: Create environment file
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
        run: |
          # Create .env file with secrets
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cat > ~/apps/reusify/.env << EOL
          NODE_ENV=production
          BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL=${{ secrets.BETTER_AUTH_URL }}
          TURSO_DATABASE_URL=${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}
          EOL"

      - name: Install production dependencies and start application
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd ~/apps/reusify && \
          # Check for NVM and install it if not present
          if [ ! -d ~/.nvm ]; then
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            export NVM_DIR=\$HOME/.nvm
            [ -s \$NVM_DIR/nvm.sh ] && \. \$NVM_DIR/nvm.sh
          fi && \
          # Load NVM and use Node LTS
          export NVM_DIR=\$HOME/.nvm
          [ -s \$NVM_DIR/nvm.sh ] && \. \$NVM_DIR/nvm.sh
          nvm use --lts || nvm install --lts && \
          # Install pnpm if not present
          npm install -g pnpm && \
          # Install PM2 globally if not already installed
          npm install -g pm2 && \
          # Install only production dependencies
          pnpm install --prod && \
          # Start or restart the application
          pm2 stop reusify || true && \
          pm2 start pnpm --name 'reusify' -- start && \
          pm2 save"
